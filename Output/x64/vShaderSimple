#version 330 core

layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal_modelspace;
layout(location = 2) in vec2 vertexUV;

uniform mat4 M;
uniform mat4 V;
uniform mat4 P;

uniform vec3 LightPosition_worldspace;
uniform vec3 CameraPosition_worldspace;

uniform int vertexVsFragment;
uniform int depthFog;


out vec3 vertexPosition_worldspace;
out vec3 vertexNormal_worldspace;
out vec2 UV;

out vec3 LightDirection_worldspace;
out vec3 CameraDirection_worldspace;

out vec4 vertexPosition_viewspace;

out float distVertex;
out float normalizedDepth;


void main()
{
	gl_Position =  P * V * M * vec4(vertexPosition_modelspace, 1);
	
	vertexPosition_worldspace = (M * vec4(vertexPosition_modelspace, 1)).xyz;
	vertexNormal_worldspace   = normalize(mat3(M) * vertexNormal_modelspace);
	UV = vertexUV;
	
	
	LightDirection_worldspace  = LightPosition_worldspace  - vertexPosition_worldspace;
	CameraDirection_worldspace = CameraPosition_worldspace - vertexPosition_worldspace;
	
	vertexPosition_viewspace = V * M * vec4(vertexPosition_modelspace, 1);
	
	
	distVertex = 0.0f;
	
	if(vertexVsFragment == 0)
	{
	    //compute depth
		if(depthFog == 1)
		{
			distVertex = abs(vertexPosition_viewspace.z);
		}
		else
		{
		    distVertex = length(vertexPosition_viewspace);
		}
	}

}