#version 330 core

in vec3 Normal_cameraspace;
in vec3 LightDirection_cameraspace;
in vec3 CameraDirection_cameraspace;

in vec3 CameraPosition_cameraspace;

// Ouput data
out vec3 color;

void main()
{
	vec3 N = normalize( Normal_cameraspace );
	vec3 L = normalize( LightDirection_cameraspace );
	vec3 V = normalize( CameraDirection_cameraspace );
	
	vec3 LightColor = vec3(1, 1, 1);
	float LightPower = 5.0f;
	
	//
	float cosTheta = clamp( dot(N, L), 0, 1 );
//	vec3 DiffuseReflectances = vec3(1, 1, 1);
//	vec3 DiffuseIntensity = vec3(1, 1, 1);
//	vec3 MaterialDiffuseColor = DiffuseReflectances * DiffuseIntensity * cosTheta;
	vec3 MaterialDiffuseColor = vec3(1, 0, 0);
	
	
	//
//	vec3 AmbientReflectances = vec3(0.1, 0.1, 0.1);
//	vec3 AmbientIntensity = vec3(1, 1, 1);	
//	vec3 MaterialAmbientColor = AmbientReflectances * AmbientIntensity;
	vec3 MaterialAmbientColor = vec3(0.1, 0.1, 0.1);
		
	
	//
	float Shininess = 50;
    vec3 H = normalize(L + V);
    float specularTerm = pow(clamp(dot(N, H), 0, 1), Shininess);
	
	
//	vec3 SpecularReflectances = vec3(1, 1, 1);
//	vec3 SpecularIntensity = vec3(1, 1, 1);
	
//	vec3 MaterialSpecularColor = SpecularReflectances * SpecularIntensity * specularTerm;
	vec3 MaterialSpecularColor = vec3(1, 1, 1);
	



	color = MaterialAmbientColor + MaterialDiffuseColor * cosTheta + MaterialSpecularColor * specularTerm;	

//	color = MaterialSpecularColor * specularTerm;

//	color = CameraPosition_cameraspace;
}