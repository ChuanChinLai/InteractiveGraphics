#version 330 core

layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal_modelspace;
layout(location = 2) in vec2 vertexUV;


out vec3 Normal_cameraspace;
out vec3 LightDirection_cameraspace;
out vec3 CameraDirection_cameraspace;
out vec2 UV;

out mat4 View;


uniform vec3 LightPosition_worldspace;

uniform mat4 M;
uniform mat4 V;
uniform mat4 P;

void main()
{
	UV = vertexUV;
	View = V;
	
//	gl_Position =  vec4(vertexPosition_modelspace, 1);
	gl_Position =  P * V * M * vec4(vertexPosition_modelspace, 1);
	
	Normal_cameraspace = ( transpose(inverse(V * M)) * vec4(vertexNormal_modelspace,0)).xyz;
	
	vec3 vertexPosition_cameraspace = (V * M * vec4(vertexPosition_modelspace, 1)).xyz;

	
	vec3 LightPosition_cameraspace = ( V * vec4(LightPosition_worldspace, 1)).xyz;
	LightDirection_cameraspace = LightPosition_cameraspace - vertexPosition_cameraspace;
	
	CameraDirection_cameraspace = - vertexPosition_cameraspace;
}