#version 330 core

// Ouput data
out vec4 color;

uniform vec3 LightPosition_worldspace;
uniform vec3 CameraPosition_worldspace;

uniform int fogSelector;
uniform int depthSelect;
uniform int depthFog;
uniform int compareSelect;

//can pass them as uniforms
const vec3 DiffuseLight = vec3(0.15, 0.05, 0.0);
const vec3 RimColor  = vec3(0.2, 0.2, 0.2);


in vec4 vertexPosition_worldspace;
in vec3 vertexNormal_worldspace;
in vec2 UV;

in vec3 LightDirection_worldspace;
in vec3 CameraDirection_worldspace;
in vec4 vertexPosition_viewspace;
in vec4 vertexPosition_projectedspace;

in float normalizedDepth;

const vec3 fogColor = vec3(0.5, 0.5, 0.5);


uniform sampler2D Texture_Brick;

void main()
{
	vec3 N = normalize( vertexNormal_worldspace );
	vec3 L = normalize( LightDirection_worldspace );
	vec3 V = normalize( CameraDirection_worldspace );

	//
	float diffuseTerm = clamp( dot(N, L), 0, 1 );
	vec3 MaterialDiffuseColor = vec3(1, 0, 0);
	
	//
	vec3 MaterialAmbientColor = vec3(0.1, 0.1, 0.1);

	//
	float Shininess = 50;
    vec3 H = normalize(L + V);
    float specularTerm = pow(clamp(dot(N, H), 0, 1), Shininess);
	vec3 MaterialSpecularColor = vec3(1, 1, 1);
	
	vec4 teapot_color = vec4(MaterialAmbientColor + MaterialDiffuseColor * diffuseTerm + MaterialSpecularColor * specularTerm, 1);	
	

	//get all lights and texture
	vec3 current_color = teapot_color.xyz;
	

	vec3 finalColor = vec3(0,0,0);
	float dist = 0 ;
	float fogFactor = 0;

	if(depthFog == 1)
	{
		dist = abs(vertexPosition_viewspace.z);
	}
	else
	{
	     dist = length(vertexPosition_viewspace);
	}


	
	//fog model
	if(fogSelector == 0)
	{
		finalColor = current_color;
	}
	else if( fogSelector == 1)
	{
		float fog_start = 20;
		float fog_end = 80;
		
		fogFactor = (fog_end - dist)/(fog_end - fog_start);
		fogFactor = clamp( fogFactor, 0.0, 1.0 );

    	finalColor = mix(fogColor, current_color, fogFactor);
	}
	else if( fogSelector == 2)
	{
	   const float FogDensity = 0.05;
	   fogFactor = 1.0 /exp(dist * FogDensity);
	   fogFactor = clamp( fogFactor, 0.0, 1.0 );
	
	   finalColor = mix(fogColor, current_color, fogFactor);
	}
	else if( fogSelector == 3)
	{
		const float FogDensity = 0.05;
		fogFactor = 1.0 /exp( (dist * FogDensity)* (dist * FogDensity));
		fogFactor = clamp( fogFactor, 0.0, 1.0 ); 
		
		finalColor = mix(fogColor, current_color, fogFactor);
	}
	else if( fogSelector == 4)
	{		
		float be = 0.025 * smoothstep(0.0, 6.0, CameraPosition_worldspace.y - vertexPosition_viewspace.y);
		float bi = 0.025 * smoothstep(0.0,  80, CameraPosition_worldspace.y - vertexPosition_viewspace.y);
		float ext =  exp(-dist * be);
		float insc = exp(-dist * bi);
		
		finalColor = fogColor * (1 - insc) + current_color * ext;	   
	}
	
		
	if(depthSelect == 1)
	{
		fogFactor = 1 - fogFactor;
		color = vec4( fogFactor, fogFactor, fogFactor, 1.0 );
	}
	else
	{
		if(compareSelect == 1)
		{
			if(vertexPosition_projectedspace.x > 0.5f)
			{
				color = vec4(finalColor, 1);
			}
			else
			{
				color = vec4(current_color, 1);
			}
		}
		else
		{
			color = vec4(finalColor, 1);
		}	
	}
}