#version 330 core

// Ouput data
out vec4 color;

uniform vec3 LightPosition_worldspace;
uniform vec3 CameraPosition_worldspace;

uniform int fogSelector;
uniform int depthSelect;
uniform int vertexVsFragment;
uniform int depthFog;
uniform int depthFogChanges;

//can pass them as uniforms
const vec3 DiffuseLight = vec3(0.15, 0.05, 0.0);
const vec3 RimColor  = vec3(0.2, 0.2, 0.2);


in vec4 vertexPosition_worldspace;
in vec3 vertexNormal_worldspace;
in vec2 UV;

in vec3 LightDirection_worldspace;
in vec3 CameraDirection_worldspace;

in vec4 vertexPosition_viewspace;

in float distVertex;
in float normalizedDepth;

const vec3 fogColor = vec3(0.5, 0.5, 0.5);


uniform sampler2D Texture_Brick;

void main()
{
	vec3 N = normalize( vertexNormal_worldspace );
	vec3 L = normalize( LightDirection_worldspace );
	vec3 V = normalize( CameraDirection_worldspace );

	//
	float diffuseTerm = clamp( dot(N, L), 0, 1 );
	vec3 MaterialDiffuseColor = vec3(1, 0, 0);
	
	//
	vec3 MaterialAmbientColor = vec3(0.1, 0.1, 0.1);

	//
	float Shininess = 50;
    vec3 H = normalize(L + V);
    float specularTerm = pow(clamp(dot(N, H), 0, 1), Shininess);
	vec3 MaterialSpecularColor = vec3(1, 1, 1);
	
	vec4 teapot_color = vec4(MaterialAmbientColor + MaterialDiffuseColor * diffuseTerm + MaterialSpecularColor * specularTerm, 1);	
	
	//rim lighting
	
	float rim = 1 - max(dot(V, N), 0.0);
	rim = smoothstep(0.6, 1.0, rim);
	vec3 finalRim = RimColor * vec3(rim, rim, rim);

	
	//get all lights and texture
	vec3 current_color = finalRim + teapot_color.xyz;
	

	vec3 finalColor = vec3(0,0,0);
	float dist = 0 ;
	float fogFactor = 0;

	if(vertexVsFragment == 1)
	{	
		if(depthFog == 1)
		{
     		if(depthFogChanges == 0)
			{
				dist = abs(vertexPosition_viewspace.z);
			}
			else
			{
				dist = (gl_FragCoord.z / gl_FragCoord.w);
			}
		}
		else
		{
		     dist = length(vertexPosition_viewspace);
		}
	}
	else
	{
		 dist = distVertex;
	}

	
	//fog model
	if(fogSelector == 0)
	{
		finalColor = current_color;
	}
	else if( fogSelector == 1)
	{
		fogFactor = (80 - dist)/(80 - 20);
		fogFactor = clamp( fogFactor, 0.0, 1.0 );

    	finalColor = mix(fogColor, current_color, fogFactor);
	}
	else if( fogSelector == 2)
	{
	   const float FogDensity = 0.05;
	   fogFactor = 1.0 /exp(dist * FogDensity);
	   fogFactor = clamp( fogFactor, 0.0, 1.0 );
	
	   finalColor = mix(fogColor, current_color, fogFactor);
	}
	else if( fogSelector == 3)
	{
		   const float FogDensity = 0.05;
		   fogFactor = 1.0 /exp( (dist * FogDensity)* (dist * FogDensity));
		   fogFactor = clamp( fogFactor, 0.0, 1.0 ); 

		   finalColor = mix(fogColor, current_color, fogFactor);
	}
	else if( fogSelector == 4)
	{
			float be = 0.025 * smoothstep(0.0, 6.0, 10.0 - vertexPosition_viewspace.y);
			float bi = 0.035 * smoothstep(0.0, 80, 10.0 - vertexPosition_viewspace.y);
			float ext =  exp(-dist * be);
			float insc = exp(-dist * bi);
		
		    finalColor = current_color * ext + fogColor * (1 - insc);	   
	}
	
		
	if(depthSelect == 1)
	{
		 fogFactor = 1 - fogFactor;
		 color = vec4( fogFactor, fogFactor, fogFactor, 1.0 );
	}
	else
	{
		color = vec4(finalColor, 1);
	}

}