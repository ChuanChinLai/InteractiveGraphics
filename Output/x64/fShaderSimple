#version 330 core

// Ouput data
out vec4 color;

uniform vec3 LightPosition_worldspace;
uniform vec3 CameraPosition_worldspace;

uniform int fogSelector;
uniform int depthSelect;
uniform int vertexVsFragment;
uniform int depthFog;
uniform int depthFogChanges;
uniform int ffVertexFragment;

//can pass them as uniforms
const vec3 DiffuseLight = vec3(0.15, 0.05, 0.0);
const vec3 RimColor  = vec3(0.2, 0.2, 0.2);


in vec4 vertexPosition_worldspace;
in vec3 vertexNormal_worldspace;
in vec2 UV;

in vec3 LightDirection_worldspace;
in vec3 CameraDirection_worldspace;

in vec4 viewSpace;

in float distVertex;
in float normalizedDepth;
in float fogFactorVF;

float fogFactorVertex = 0;
const vec3 fogColor = vec3(0.5,0.5,0.5);



uniform sampler2D Texture_Brick;

void main()
{
	vec3 N = normalize( vertexNormal_worldspace );
	vec3 L = normalize( LightDirection_worldspace );
	vec3 V = normalize( CameraDirection_worldspace );

	
	//
	float diffuseTerm = clamp( dot(N, L), 0, 1 );
	vec3 MaterialDiffuseColor = vec3(1, 0, 0);
	
	
	//
	vec3 MaterialAmbientColor = vec3(0.1, 0.1, 0.1);

	
	//
	float Shininess = 50;
    vec3 H = normalize(L + V);
    float specularTerm = pow(clamp(dot(N, H), 0, 1), Shininess);
	vec3 MaterialSpecularColor = vec3(1, 1, 1);
	


	color = vec4(MaterialAmbientColor + MaterialDiffuseColor * diffuseTerm + MaterialSpecularColor * specularTerm, 1);	
}