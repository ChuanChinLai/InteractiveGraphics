#version 330 core

in vec2 UV;

in vec3 Normal_cameraspace;
in vec3 LightDirection_cameraspace;
in vec3 CameraDirection_cameraspace;

// Ouput data
out vec4 color;

//uniform samplerCube cubemap;

uniform sampler2D Texture_Brick;
uniform sampler2D Texture_Brick_specular;



void main()
{
	vec3 N = normalize( Normal_cameraspace );
	vec3 L = normalize( LightDirection_cameraspace );
	vec3 V = normalize( CameraDirection_cameraspace );
	
	vec3 LightColor = vec3(0.9, 0.9, 0.9);
	float LightPower = 5.0f;
	
	//
	float diffuseTerm = clamp( dot(N, L), 0, 1 );
	vec3 MaterialDiffuseColor = texture2D(Texture_Brick, UV).xyz;
	
	
	//
	vec3 MaterialAmbientColor = MaterialDiffuseColor;

	
	//
	float Shininess = 50;
    vec3 H = normalize(L + V);
    float specularTerm = pow(clamp(dot(N, H), 0, 1), Shininess);
	vec3 MaterialSpecularColor = texture2D(Texture_Brick_specular, UV).xyz;
	
//	color = MaterialDiffuseColor;	
	
//	color = texture( Texture_Brick, UV ).rgb;
//	color = MaterialAmbientColor + MaterialDiffuseColor * diffuseTerm;	
//	color = MaterialDiffuseColor * diffuseTerm + MaterialSpecularColor * specularTerm;	
	vec3 Blinn_color = 0.2 * MaterialAmbientColor + LightColor * (MaterialDiffuseColor * diffuseTerm + MaterialSpecularColor * specularTerm);	
//	color = vec4(0);


	vec3 reflected = reflect(V, N);
//	reflected = vec3(inverse(View) * vec4(reflected, 0.0));
//	vec3 Reflect_color = texture(cubemap, reflected).xyz;
	
//	color = vec4(Blinn_color * Reflect_color,1.0);
	color = vec4(Blinn_color, 1);
//	color = vec4(1, 0, 0, 1);
}