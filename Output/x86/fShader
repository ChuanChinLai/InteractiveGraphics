#version 330 core

in vec2 UV;

in vec3 Normal_cameraspace;
in vec3 LightDirection_cameraspace;
in vec3 CameraDirection_cameraspace;

// Ouput data
out vec3 color;

uniform sampler2D Texture_Brick;
uniform sampler2D Texture_Brick_specular;

void main()
{
	vec3 N = normalize( Normal_cameraspace );
	vec3 L = normalize( LightDirection_cameraspace );
	vec3 V = normalize( CameraDirection_cameraspace );
	
	vec3 LightColor = vec3(0.9, 0.9, 0.9);
	float LightPower = 5.0f;
	
	//
	float diffuseTerm = clamp( dot(N, L), 0, 1 );
	vec3 MaterialDiffuseColor = texture( Texture_Brick, UV ).rgb;
	
	
	//
	vec3 MaterialAmbientColor = MaterialDiffuseColor;

	
	//
	float Shininess = 50;
    vec3 H = normalize(L + V);
    float specularTerm = pow(clamp(dot(N, H), 0, 1), Shininess);
//	vec3 MaterialSpecularColor = vec3(1, 1, 1);
	vec3 MaterialSpecularColor = texture( Texture_Brick_specular, UV ).rgb;
	
//	color = MaterialDiffuseColor;	
	
//	color = N;
//	color = MaterialAmbientColor + MaterialDiffuseColor * diffuseTerm;	
//	color = MaterialDiffuseColor * diffuseTerm + MaterialSpecularColor * specularTerm;	
	color = 0.2 * MaterialAmbientColor + LightColor*(MaterialDiffuseColor * diffuseTerm + MaterialSpecularColor * specularTerm);	
//	color = vec4(0);
}